[
["index.html", "Reproducible and scalable workflows with Snakemake Chapter 1 Prerequisites", " Reproducible and scalable workflows with Snakemake Shaojun Xie 2018-12-31 Chapter 1 Prerequisites This is a book written for the reseasrchers who want to learn how to use Snakemake to build repruducible and scalable workflows. We assume the readers have already been familiar with NGS data analysis. For example, a tipycal workflow of RNA-seq data includes quality control of the reads, read alignment, read count extraction, DEG detection, GO and KEGG enrichment analysis. "],
["introduction.html", "Chapter 2 Introduction 2.1 Installation 2.2 Install software using conda 2.3 Backup a environment", " Chapter 2 Introduction 2.1 Installation Snakemake 2.1.1 Recommended way to install snakemake ## Create a snakemake environment conda create -n smk_env You will see the following if the envrironment can be successfully install: ## Package Plan ## environment location: /home/xie186/miniconda2/envs/smk_env Proceed ([y]/n)? Preparing transaction: done Verifying transaction: done Executing transaction: done # # To activate this environment, use: # &gt; source activate smk_env # # To deactivate an active environment, use: # &gt; source deactivate # Now you run the command line below: source activate smk_env ## This may take a few minutes. conda install -c bioconda -c conda-forge snakemake 2.2 Install software using conda # Trim galore will be installed # cutadapt will be also installed conda install -c bioconda trim-galore # Bismark (bowtie2) will be installed conda install -c bioconda bismark 2.3 Backup a environment conda list --export &gt; requirements.txt # &#39;requirements.txt&#39; may be used to create an environment using: # $ conda create --name &lt;env&gt; --file &lt;this file&gt; "],
["literature.html", "Chapter 3 Literature", " Chapter 3 Literature Here is a review of existing methods. "],
["methods.html", "Chapter 4 Methods", " Chapter 4 Methods We describe our methods in this chapter. "],
["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],
["references.html", "References", " References "],
["paired-samples-for-snakemake.html", "Chapter 7 Paired samples for snakemake 7.1 Convert dictionary content to wildcards", " Chapter 7 Paired samples for snakemake sfsd Tang (n.d.) # read https://groups.google.com/forum/#!searchin/snakemake/dependencies/snakemake/iDnr3PIcsfE/x-qQvzWBBgAJ # https://groups.google.com/forum/#!searchin/snakemake/dependencies/snakemake/1QelazgzilY/oBgZoP19BL4J aDict = {&quot;B&quot;:&quot;inputG1&quot;, &quot;A&quot;:&quot;inputG1&quot;, &quot;C&quot;:&quot;inputG2&quot;} rule all: input: [&quot;C.bed&quot;, &quot;A.bed&quot;, &quot;B.bed&quot;] def get_files(wildcards): case = wildcards.case control = aDict[case] return [case + &quot;.sorted.bam&quot;, control + &quot;.sorted.bam&quot;] rule call_peak: input: get_files output: &quot;{case}.bed&quot; shell: &quot;&quot;&quot; echo macs14 -t {input[0]} -c {input[1]} -n {wildcards.case} touch {output} &quot;&quot;&quot; 7.1 Convert dictionary content to wildcards SAMPLES=&quot;BMAL1-ZT10_rep1 BMAL1-ZT10_rep2 BMAL1-ZT22_rep1&quot;.split() COMPARES={ &quot;10vs22&quot; : (&quot;BMAL1-ZT10_rep1 BMAL1-ZT10_rep2&quot;.split(), [&quot;BMAL1-ZT22_rep1&quot;]), &quot;r1vsr2&quot; : ([&quot;BMAL1-ZT10_rep1&quot;], [&quot;BMAL1-ZT10_rep2&quot;])} rule All: input: expand(&quot;diffexp/{compare}.diff&quot;, compare=COMPARES.keys()) rule GfoldDiff: input: expand(&quot;diffexp/{sample}.cnt&quot;, sample=COMPARES[&quot;{wildcards.compare}&quot;]) output: &quot;diffexp/{compare}.diff&quot; def gfold_group1(wildcards): return [&quot;diffexp/{0}.cnt&quot;.format(i) for i in COMPARES[wildcards.compare][0]] def gfold_group2(wildcards): return [&quot;diffexp/{0}.cnt&quot;.format(i) for i in COMPARES[wildcards.compare][1]] rule GfoldDiff: input: group1=gfold_group1,group2=gfold_group2 output: &quot;diffexp/{compare}.diff&quot; run: shell(&quot;gfold diff -s1 {group1} -s2 {group2} -o {output}&quot;.format( group1=&quot;,&quot;.join(group1), group2=&quot;,&quot;.join(group2), output=output)) "]
]
